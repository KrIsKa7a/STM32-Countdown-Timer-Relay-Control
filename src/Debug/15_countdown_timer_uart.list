
15_countdown_timer_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b70  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da4  08000da4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000da4  08000da4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da4  08000da4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da4  08000da4  00010da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000da8  08000da8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000014  08000dc0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000dc0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001952  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000748  00000000  00000000  00021996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  000220e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00022280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192c6  00000000  00000000  000223e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f70  00000000  00000000  0003b6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e214  00000000  00000000  0003d616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c4  00000000  00000000  000cb87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08000d38 	.word	0x08000d38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08000d38 	.word	0x08000d38

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <GPIOB_pin7_pin14_output_init>:
		0b0000111, //7
		0b1111111, //8
		0b1101111, //9
};

void GPIOB_pin7_pin14_output_init(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOB peripheral
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOB_EN;
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <GPIOB_pin7_pin14_output_init+0x4c>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a10      	ldr	r2, [pc, #64]	; (800027c <GPIOB_pin7_pin14_output_init+0x4c>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30

	// Set mode of PIN14 to Output Push-Pull
	GPIOB->MODER |= (1U<<28);
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 8000246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<29);
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 8000252:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000256:	6013      	str	r3, [r2, #0]

	// Set mode of PIN7 to Output Push-Pull
	GPIOB->MODER |= (1U<<14);
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 800025e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<15);
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a05      	ldr	r2, [pc, #20]	; (8000280 <GPIOB_pin7_pin14_output_init+0x50>)
 800026a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020400 	.word	0x40020400

08000284 <GPIOB_pin7_set>:

void GPIOB_pin7_set(void) {
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIOB_ODR_PIN7;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <GPIOB_pin7_set+0x1c>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <GPIOB_pin7_set+0x1c>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000292:	6153      	str	r3, [r2, #20]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40020400 	.word	0x40020400

080002a4 <GPIOB_pin14_set>:

void GPIOB_pin7_reset(void) {
	GPIOB->ODR &= ~GPIOB_ODR_PIN7;
}

void GPIOB_pin14_set(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIOB_ODR_PIN14;
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <GPIOB_pin14_set+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <GPIOB_pin14_set+0x1c>)
 80002ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002b2:	6153      	str	r3, [r2, #20]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400

080002c4 <GPIOB_pin14_reset>:

void GPIOB_pin14_reset(void) {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~GPIOB_ODR_PIN14;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <GPIOB_pin14_reset+0x1c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <GPIOB_pin14_reset+0x1c>)
 80002ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002d2:	6153      	str	r3, [r2, #20]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40020400 	.word	0x40020400

080002e4 <GPIOA_GPIOC_7segment_init>:

void GPIOA_GPIOC_7segment_init(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOA peripheral
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOA_EN;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <GPIOA_GPIOC_7segment_init+0x40>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <GPIOA_GPIOC_7segment_init+0x40>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA_init_D1_to_D4();
 80002f4:	f000 f92e 	bl	8000554 <GPIOA_init_D1_to_D4>

	// Enable clock access for GPIOC peripheral
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOC_EN;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <GPIOA_GPIOC_7segment_init+0x40>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a09      	ldr	r2, [pc, #36]	; (8000324 <GPIOA_GPIOC_7segment_init+0x40>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC_init_A_to_F();
 8000304:	f000 f960 	bl	80005c8 <GPIOC_init_A_to_F>

	// Turn off all digits
	GPIOA_Dx_Off(0); //D1
 8000308:	2000      	movs	r0, #0
 800030a:	f000 f90d 	bl	8000528 <GPIOA_Dx_Off>
	GPIOA_Dx_Off(1); //D2
 800030e:	2001      	movs	r0, #1
 8000310:	f000 f90a 	bl	8000528 <GPIOA_Dx_Off>
	GPIOA_Dx_Off(2); //D3
 8000314:	2002      	movs	r0, #2
 8000316:	f000 f907 	bl	8000528 <GPIOA_Dx_Off>
	GPIOA_Dx_Off(3); //D4
 800031a:	2003      	movs	r0, #3
 800031c:	f000 f904 	bl	8000528 <GPIOA_Dx_Off>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40023800 	.word	0x40023800

08000328 <GPIOA_GPIOC_7segment_number_display>:

void GPIOA_GPIOC_7segment_number_display(int number) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	uint8_t numDigits[4] = {0};
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
	get_digits_from_number(number, numDigits);
 8000334:	f107 030c 	add.w	r3, r7, #12
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 f892 	bl	8000464 <get_digits_from_number>

	for (int dx = 0; dx < 4; dx++) {
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e024      	b.n	8000390 <GPIOA_GPIOC_7segment_number_display+0x68>
		uint8_t currentDigit = numDigits[3 - dx];
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	f1c3 0303 	rsb	r3, r3, #3
 800034c:	3318      	adds	r3, #24
 800034e:	443b      	add	r3, r7
 8000350:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000354:	74fb      	strb	r3, [r7, #19]

		GPIOC_display_digit(currentDigit);
 8000356:	7cfb      	ldrb	r3, [r7, #19]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8af 	bl	80004bc <GPIOC_display_digit>
		if (dx == 1) {
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d105      	bne.n	8000370 <GPIOA_GPIOC_7segment_number_display+0x48>
			GPIOC->ODR |= GPIOC_DP;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <GPIOA_GPIOC_7segment_number_display+0x78>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <GPIOA_GPIOC_7segment_number_display+0x78>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6153      	str	r3, [r2, #20]
		}

		GPIOA_Dx_On(dx);
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f8bf 	bl	80004f8 <GPIOA_Dx_On>
		systick_delay_ms(3);
 800037a:	2003      	movs	r0, #3
 800037c:	f000 faf2 	bl	8000964 <systick_delay_ms>
		GPIOA_Dx_Off(dx);
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f8cf 	bl	8000528 <GPIOA_Dx_Off>
	for (int dx = 0; dx < 4; dx++) {
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	2b03      	cmp	r3, #3
 8000394:	ddd7      	ble.n	8000346 <GPIOA_GPIOC_7segment_number_display+0x1e>
	}
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40020800 	.word	0x40020800

080003a4 <GPIOA_GPIOC_7segment_EOC>:

void GPIOA_GPIOC_7segment_EOC() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
	GPIOC_display_digit(0);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 f886 	bl	80004bc <GPIOC_display_digit>

	for (int dx = 0; dx < 4; dx++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	e007      	b.n	80003c6 <GPIOA_GPIOC_7segment_EOC+0x22>
		GPIOA_Dx_On(dx);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f89c 	bl	80004f8 <GPIOA_Dx_On>
	for (int dx = 0; dx < 4; dx++) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	ddf4      	ble.n	80003b6 <GPIOA_GPIOC_7segment_EOC+0x12>
	}

	systick_delay_ms(700);
 80003cc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80003d0:	f000 fac8 	bl	8000964 <systick_delay_ms>

	for (int dx = 0; dx < 4; dx++) {
 80003d4:	2300      	movs	r3, #0
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	e007      	b.n	80003ea <GPIOA_GPIOC_7segment_EOC+0x46>
		GPIOA_Dx_Off(dx);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f8a2 	bl	8000528 <GPIOA_Dx_Off>
	for (int dx = 0; dx < 4; dx++) {
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	ddf4      	ble.n	80003da <GPIOA_GPIOC_7segment_EOC+0x36>
	}

	systick_delay_ms(700);
 80003f0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80003f4:	f000 fab6 	bl	8000964 <systick_delay_ms>
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <GPIOA_pin4_relay_ctrl_init>:

void GPIOA_pin4_relay_ctrl_init(void) {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	// A4 -> Relay control
	GPIOA->MODER |= (1U<<8);
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <GPIOA_pin4_relay_ctrl_init+0x28>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <GPIOA_pin4_relay_ctrl_init+0x28>)
 800040a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<9);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <GPIOA_pin4_relay_ctrl_init+0x28>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <GPIOA_pin4_relay_ctrl_init+0x28>)
 8000416:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40020000 	.word	0x40020000

0800042c <GPIOA_relay_activate>:

void GPIOA_relay_activate(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIOA_RELAY;
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <GPIOA_relay_activate+0x18>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a03      	ldr	r2, [pc, #12]	; (8000444 <GPIOA_relay_activate+0x18>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6153      	str	r3, [r2, #20]
	GPIOB_pin14_set();
 800043c:	f7ff ff32 	bl	80002a4 <GPIOB_pin14_set>
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40020000 	.word	0x40020000

08000448 <GPIOA_relay_deactivate>:

void GPIOA_relay_deactivate(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIOA_RELAY;
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <GPIOA_relay_deactivate+0x18>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a03      	ldr	r2, [pc, #12]	; (8000460 <GPIOA_relay_deactivate+0x18>)
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6153      	str	r3, [r2, #20]
	GPIOB_pin14_reset();
 8000458:	f7ff ff34 	bl	80002c4 <GPIOB_pin14_reset>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40020000 	.word	0x40020000

08000464 <get_digits_from_number>:

static void get_digits_from_number(int number, uint8_t* numDigits) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
	while (number > 0) {
 800046e:	e019      	b.n	80004a4 <get_digits_from_number+0x40>
		*numDigits = number % 10;
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <get_digits_from_number+0x54>)
 8000474:	fb83 1302 	smull	r1, r3, r3, r2
 8000478:	1099      	asrs	r1, r3, #2
 800047a:	17d3      	asrs	r3, r2, #31
 800047c:	1ac9      	subs	r1, r1, r3
 800047e:	460b      	mov	r3, r1
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	440b      	add	r3, r1
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	1ad1      	subs	r1, r2, r3
 8000488:	b2ca      	uxtb	r2, r1
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	701a      	strb	r2, [r3, #0]
		number /= 10;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <get_digits_from_number+0x54>)
 8000492:	fb82 1203 	smull	r1, r2, r2, r3
 8000496:	1092      	asrs	r2, r2, #2
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	607b      	str	r3, [r7, #4]
		numDigits++;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	3301      	adds	r3, #1
 80004a2:	603b      	str	r3, [r7, #0]
	while (number > 0) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	dce2      	bgt.n	8000470 <get_digits_from_number+0xc>
	}
}
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	66666667 	.word	0x66666667

080004bc <GPIOC_display_digit>:

static void GPIOC_display_digit(uint8_t digit) {
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR = 0;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <GPIOC_display_digit+0x34>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	615a      	str	r2, [r3, #20]

	uint16_t digitMask = digitMasks[digit];
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <GPIOC_display_digit+0x38>)
 80004d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d4:	81fb      	strh	r3, [r7, #14]
	GPIOC->ODR |= digitMask;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <GPIOC_display_digit+0x34>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	89fb      	ldrh	r3, [r7, #14]
 80004dc:	4904      	ldr	r1, [pc, #16]	; (80004f0 <GPIOC_display_digit+0x34>)
 80004de:	4313      	orrs	r3, r2
 80004e0:	614b      	str	r3, [r1, #20]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40020800 	.word	0x40020800
 80004f4:	20000000 	.word	0x20000000

080004f8 <GPIOA_Dx_On>:

static void GPIOA_Dx_On(uint8_t dx) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1U<<dx);
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <GPIOA_Dx_On+0x2c>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f303 	lsl.w	r3, r1, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	4904      	ldr	r1, [pc, #16]	; (8000524 <GPIOA_Dx_On+0x2c>)
 8000512:	4013      	ands	r3, r2
 8000514:	614b      	str	r3, [r1, #20]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40020000 	.word	0x40020000

08000528 <GPIOA_Dx_Off>:

static void GPIOA_Dx_Off(uint8_t dx) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1U<<dx);
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <GPIOA_Dx_Off+0x28>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2101      	movs	r1, #1
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	4904      	ldr	r1, [pc, #16]	; (8000550 <GPIOA_Dx_Off+0x28>)
 8000540:	4313      	orrs	r3, r2
 8000542:	614b      	str	r3, [r1, #20]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40020000 	.word	0x40020000

08000554 <GPIOA_init_D1_to_D4>:

static void GPIOA_init_D1_to_D4(void) {
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	// A1 -> D2
	// A2 -> D3
	// A3 -> D4

	// D1 -> Output
	GPIOA->MODER |= (1U<<0);
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<1);
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800056a:	f023 0302 	bic.w	r3, r3, #2
 800056e:	6013      	str	r3, [r2, #0]

	// D2 -> Output
	GPIOA->MODER |= (1U<<2);
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<3);
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 8000582:	f023 0308 	bic.w	r3, r3, #8
 8000586:	6013      	str	r3, [r2, #0]

	// D3 -> Output
	GPIOA->MODER |= (1U<<4);
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<5);
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 800059a:	f023 0320 	bic.w	r3, r3, #32
 800059e:	6013      	str	r3, [r2, #0]

	// D4 -> Output
	GPIOA->MODER |= (1U<<6);
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 80005a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<7);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <GPIOA_init_D1_to_D4+0x70>)
 80005b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40020000 	.word	0x40020000

080005c8 <GPIOC_init_A_to_F>:

static void GPIOC_init_A_to_F(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	// C4 -> E
	// C5 -> F
	// C6 -> G
	// C7 -> DP
	// A -> Output
	GPIOC->MODER |= (1U<<0);
 80005cc:	4b32      	ldr	r3, [pc, #200]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a31      	ldr	r2, [pc, #196]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<1);
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005de:	f023 0302 	bic.w	r3, r3, #2
 80005e2:	6013      	str	r3, [r2, #0]

	// B -> Output
	GPIOC->MODER |= (1U<<2);
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<3);
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a28      	ldr	r2, [pc, #160]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005f6:	f023 0308 	bic.w	r3, r3, #8
 80005fa:	6013      	str	r3, [r2, #0]

	// C -> Output
	GPIOC->MODER |= (1U<<4);
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<5);
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a22      	ldr	r2, [pc, #136]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800060e:	f023 0320 	bic.w	r3, r3, #32
 8000612:	6013      	str	r3, [r2, #0]

	// D -> Output
	GPIOC->MODER |= (1U<<6);
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800061a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800061e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<7);
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800062a:	6013      	str	r3, [r2, #0]

	// E -> Output
	GPIOC->MODER |= (1U<<8);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000636:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<9);
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800063e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000642:	6013      	str	r3, [r2, #0]

	// F -> Output
	GPIOC->MODER |= (1U<<10);
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800064a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<11);
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800065a:	6013      	str	r3, [r2, #0]

	// G -> Output
	GPIOC->MODER |= (1U<<12);
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000666:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<13);
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800066e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000672:	6013      	str	r3, [r2, #0]

	// DP -> Output
	GPIOC->MODER |= (1U<<14);
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<15);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <GPIOC_init_A_to_F+0xd0>)
 8000686:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40020800 	.word	0x40020800

0800069c <TIM2_IRQHandler>:
#define TIM2_SR_UIF		(1U<<0)

volatile uint16_t secondsPassed = 0;
volatile uint16_t finalCountdown = 0;

void TIM2_IRQHandler(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM2_SR_UIF;
 80006a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	6113      	str	r3, [r2, #16]

	secondsPassed++;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <TIM2_IRQHandler+0x2c>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <TIM2_IRQHandler+0x2c>)
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000030 	.word	0x20000030

080006cc <main>:

void read_start_countdown_value(void);

int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	GPIOB_pin7_pin14_output_init();
 80006d2:	f7ff fdad 	bl	8000230 <GPIOB_pin7_pin14_output_init>
	GPIOA_GPIOC_7segment_init();
 80006d6:	f7ff fe05 	bl	80002e4 <GPIOA_GPIOC_7segment_init>
	GPIOA_pin4_relay_ctrl_init();
 80006da:	f7ff fe91 	bl	8000400 <GPIOA_pin4_relay_ctrl_init>
	usart3_rx_tx_init();
 80006de:	f000 f9c7 	bl	8000a70 <usart3_rx_tx_init>

	GPIOB_pin7_set();
 80006e2:	f7ff fdcf 	bl	8000284 <GPIOB_pin7_set>

	read_start_countdown_value();
 80006e6:	f000 f87d 	bl	80007e4 <read_start_countdown_value>

	tim2_1s_count_interrupt_init();
 80006ea:	f000 f987 	bl	80009fc <tim2_1s_count_interrupt_init>
	GPIOA_relay_activate();
 80006ee:	f7ff fe9d 	bl	800042c <GPIOA_relay_activate>
	while (1) {
		uint16_t secondsToDisplay = finalCountdown - secondsPassed;
 80006f2:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <main+0x108>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <main+0x10c>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	80fb      	strh	r3, [r7, #6]
		uint8_t minutes = secondsToDisplay / 60;
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	4a35      	ldr	r2, [pc, #212]	; (80007dc <main+0x110>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	b29b      	uxth	r3, r3
 800070e:	717b      	strb	r3, [r7, #5]
		uint8_t seconds = secondsToDisplay % 60;
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <main+0x110>)
 8000714:	fba3 1302 	umull	r1, r3, r3, r2
 8000718:	0959      	lsrs	r1, r3, #5
 800071a:	460b      	mov	r3, r1
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	b29b      	uxth	r3, r3
 8000726:	713b      	strb	r3, [r7, #4]
		uint16_t numberToDisplay = ((minutes / 10) * 1000) + ((minutes % 10) * 100) +
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <main+0x114>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	0152      	lsls	r2, r2, #5
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	b298      	uxth	r0, r3
 8000744:	797a      	ldrb	r2, [r7, #5]
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <main+0x114>)
 8000748:	fba3 1302 	umull	r1, r3, r3, r2
 800074c:	08d9      	lsrs	r1, r3, #3
 800074e:	460b      	mov	r3, r1
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	440b      	add	r3, r1
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	4413      	add	r3, r2
 8000762:	461a      	mov	r2, r3
 8000764:	0091      	lsls	r1, r2, #2
 8000766:	461a      	mov	r2, r3
 8000768:	460b      	mov	r3, r1
 800076a:	4413      	add	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	b29b      	uxth	r3, r3
 8000770:	4403      	add	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	491a      	ldr	r1, [pc, #104]	; (80007e0 <main+0x114>)
 8000778:	fba1 1303 	umull	r1, r3, r1, r3
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	b29b      	uxth	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	440b      	add	r3, r1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	4413      	add	r3, r2
 800078e:	b298      	uxth	r0, r3
				((seconds / 10) * 10) + (seconds % 10);
 8000790:	793a      	ldrb	r2, [r7, #4]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <main+0x114>)
 8000794:	fba3 1302 	umull	r1, r3, r3, r2
 8000798:	08d9      	lsrs	r1, r3, #3
 800079a:	460b      	mov	r3, r1
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b29b      	uxth	r3, r3
		uint16_t numberToDisplay = ((minutes / 10) * 1000) + ((minutes % 10) * 100) +
 80007a8:	4403      	add	r3, r0
 80007aa:	807b      	strh	r3, [r7, #2]

		GPIOA_GPIOC_7segment_number_display(numberToDisplay);
 80007ac:	887b      	ldrh	r3, [r7, #2]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fdba 	bl	8000328 <GPIOA_GPIOC_7segment_number_display>

		if (secondsPassed == finalCountdown) {
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <main+0x10c>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <main+0x108>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d196      	bne.n	80006f2 <main+0x26>
			tim2_1s_count_stop();
 80007c4:	f000 f944 	bl	8000a50 <tim2_1s_count_stop>
			GPIOA_GPIOC_7segment_EOC();
 80007c8:	f7ff fdec 	bl	80003a4 <GPIOA_GPIOC_7segment_EOC>
			GPIOA_relay_deactivate();
 80007cc:	f7ff fe3c 	bl	8000448 <GPIOA_relay_deactivate>
	while (1) {
 80007d0:	e78f      	b.n	80006f2 <main+0x26>
 80007d2:	bf00      	nop
 80007d4:	20000032 	.word	0x20000032
 80007d8:	20000030 	.word	0x20000030
 80007dc:	88888889 	.word	0x88888889
 80007e0:	cccccccd 	.word	0xcccccccd

080007e4 <read_start_countdown_value>:
		}
	}
}

void read_start_countdown_value(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
	char m1, m2, s1, s2;
	while (1) {
		char* startMenuMsg = "Enter start for countdown in format MM:SS: ";
 80007ea:	4b5a      	ldr	r3, [pc, #360]	; (8000954 <read_start_countdown_value+0x170>)
 80007ec:	60fb      	str	r3, [r7, #12]
		usart3_write(startMenuMsg, strlen(startMenuMsg));
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f7ff fd16 	bl	8000220 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4619      	mov	r1, r3
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f000 f9ed 	bl	8000bd8 <usart3_write>

		m1 = usart3_read();
 80007fe:	f000 f9a7 	bl	8000b50 <usart3_read>
 8000802:	4603      	mov	r3, r0
 8000804:	72fb      	strb	r3, [r7, #11]
		usart3_write_ch(m1);
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f9cd 	bl	8000ba8 <usart3_write_ch>
		m2 = usart3_read();
 800080e:	f000 f99f 	bl	8000b50 <usart3_read>
 8000812:	4603      	mov	r3, r0
 8000814:	72bb      	strb	r3, [r7, #10]
		usart3_write_ch(m2);
 8000816:	7abb      	ldrb	r3, [r7, #10]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f9c5 	bl	8000ba8 <usart3_write_ch>
		usart3_read(); // dummy :
 800081e:	f000 f997 	bl	8000b50 <usart3_read>
		usart3_write_ch(':');
 8000822:	203a      	movs	r0, #58	; 0x3a
 8000824:	f000 f9c0 	bl	8000ba8 <usart3_write_ch>
		s1 = usart3_read();
 8000828:	f000 f992 	bl	8000b50 <usart3_read>
 800082c:	4603      	mov	r3, r0
 800082e:	727b      	strb	r3, [r7, #9]
		usart3_write_ch(s1);
 8000830:	7a7b      	ldrb	r3, [r7, #9]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f9b8 	bl	8000ba8 <usart3_write_ch>
		s2 = usart3_read();
 8000838:	f000 f98a 	bl	8000b50 <usart3_read>
 800083c:	4603      	mov	r3, r0
 800083e:	723b      	strb	r3, [r7, #8]
		usart3_write_ch(s2);
 8000840:	7a3b      	ldrb	r3, [r7, #8]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f9b0 	bl	8000ba8 <usart3_write_ch>

		if (((uint32_t)s1 - 48) <= 5) {
 8000848:	7a7b      	ldrb	r3, [r7, #9]
 800084a:	3b30      	subs	r3, #48	; 0x30
 800084c:	2b05      	cmp	r3, #5
 800084e:	d900      	bls.n	8000852 <read_start_countdown_value+0x6e>
	while (1) {
 8000850:	e7cb      	b.n	80007ea <read_start_countdown_value+0x6>
			break;
 8000852:	bf00      	nop
		}
	}

	uint8_t minutes = ((uint8_t)m1 - 48) * 10 + ((uint8_t)m2 - 48);
 8000854:	7afb      	ldrb	r3, [r7, #11]
 8000856:	3b30      	subs	r3, #48	; 0x30
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	7abb      	ldrb	r3, [r7, #10]
 8000866:	4413      	add	r3, r2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3b30      	subs	r3, #48	; 0x30
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t seconds = ((uint8_t)s1 - 48) * 10 + ((uint8_t)s2 - 48);
 800086e:	7a7b      	ldrb	r3, [r7, #9]
 8000870:	3b30      	subs	r3, #48	; 0x30
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	7a3b      	ldrb	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3b30      	subs	r3, #48	; 0x30
 8000886:	71bb      	strb	r3, [r7, #6]

	finalCountdown = minutes * 60 + seconds;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	b29b      	uxth	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	b29a      	uxth	r2, r3
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	b29b      	uxth	r3, r3
 800089a:	4413      	add	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <read_start_countdown_value+0x174>)
 80008a0:	801a      	strh	r2, [r3, #0]

	uint16_t displayTime = ((minutes / 10) * 1000) + ((minutes % 10) * 100) +
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a2d      	ldr	r2, [pc, #180]	; (800095c <read_start_countdown_value+0x178>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	08db      	lsrs	r3, r3, #3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	1ad2      	subs	r2, r2, r3
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	b298      	uxth	r0, r3
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <read_start_countdown_value+0x178>)
 80008c2:	fba3 1302 	umull	r1, r3, r3, r2
 80008c6:	08d9      	lsrs	r1, r3, #3
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	4413      	add	r3, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	0091      	lsls	r1, r2, #2
 80008e0:	461a      	mov	r2, r3
 80008e2:	460b      	mov	r3, r1
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4403      	add	r3, r0
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	491a      	ldr	r1, [pc, #104]	; (800095c <read_start_countdown_value+0x178>)
 80008f2:	fba1 1303 	umull	r1, r3, r1, r3
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	0089      	lsls	r1, r1, #2
 8000900:	440b      	add	r3, r1
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	b29b      	uxth	r3, r3
 8000906:	4413      	add	r3, r2
 8000908:	b298      	uxth	r0, r3
			((seconds / 10) * 10) + (seconds % 10);
 800090a:	79ba      	ldrb	r2, [r7, #6]
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <read_start_countdown_value+0x178>)
 800090e:	fba3 1302 	umull	r1, r3, r3, r2
 8000912:	08d9      	lsrs	r1, r3, #3
 8000914:	460b      	mov	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	440b      	add	r3, r1
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	b29b      	uxth	r3, r3
	uint16_t displayTime = ((minutes / 10) * 1000) + ((minutes % 10) * 100) +
 8000922:	4403      	add	r3, r0
 8000924:	80bb      	strh	r3, [r7, #4]
	GPIOA_GPIOC_7segment_number_display(displayTime);
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fcfd 	bl	8000328 <GPIOA_GPIOC_7segment_number_display>

	char* countdownStartMsg = "\r\nPress any key to start countdown...";
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <read_start_countdown_value+0x17c>)
 8000930:	603b      	str	r3, [r7, #0]
	usart3_writeLine(countdownStartMsg, strlen(countdownStartMsg));
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f7ff fc74 	bl	8000220 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	4619      	mov	r1, r3
 800093c:	6838      	ldr	r0, [r7, #0]
 800093e:	f000 f968 	bl	8000c12 <usart3_writeLine>

	usart3_read_countdown_start(displayTime);
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f917 	bl	8000b78 <usart3_read_countdown_start>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	08000d50 	.word	0x08000d50
 8000958:	20000032 	.word	0x20000032
 800095c:	cccccccd 	.word	0xcccccccd
 8000960:	08000d7c 	.word	0x08000d7c

08000964 <systick_delay_ms>:
#define SYST_LOAD_VAL_1MS	(16000 - 1)
#define SYST_CTRL_EN		(1U<<0)
#define SYST_CTRL_CLKSRC	(1U<<2)
#define SYST_CTRL_CNTFLAG	(1U<<16)

void systick_delay_ms(int msDelay) {
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	// Load the value inside the VAL register
	SysTick->LOAD = SYST_LOAD_VAL_1MS;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <systick_delay_ms+0x58>)
 800096e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000972:	605a      	str	r2, [r3, #4]

	// Clear the previous value if there is some
	SysTick->VAL = 0;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <systick_delay_ms+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]

	// Enable SysTick module inside Cortex-M7 processor and choose clock source
	SysTick->CTRL = (SYST_CTRL_EN | SYST_CTRL_CLKSRC);
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <systick_delay_ms+0x58>)
 800097c:	2205      	movs	r2, #5
 800097e:	601a      	str	r2, [r3, #0]

	for	(int i = 0; i < msDelay; i++) {
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e009      	b.n	800099a <systick_delay_ms+0x36>
		while (!(SysTick->CTRL & SYST_CTRL_CNTFLAG)) {
 8000986:	bf00      	nop
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <systick_delay_ms+0x58>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f9      	beq.n	8000988 <systick_delay_ms+0x24>
	for	(int i = 0; i < msDelay; i++) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbf1      	blt.n	8000986 <systick_delay_ms+0x22>

		}
	}

	SysTick->CTRL &= ~SYST_CTRL_EN;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <systick_delay_ms+0x58>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <systick_delay_ms+0x58>)
 80009a8:	f023 0301 	bic.w	r3, r3, #1
 80009ac:	6013      	str	r3, [r2, #0]
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <tim2_1s_count_interrupt_init>:
#define DIER_UIE		(1U<<0)
#define TIM2_PSC		(1600 - 1)
#define TIM3_PSC		(16000 - 1)
#define TIM2_ARR		(10000 - 1)

void tim2_1s_count_interrupt_init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	// Enable clock for TIM2 peripheral
	RCC->APB1ENR |= APB1_TIM2_EN;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <tim2_1s_count_interrupt_init+0x50>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <tim2_1s_count_interrupt_init+0x50>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40

	// Set clock prescaler
	TIM2->PSC = TIM2_PSC; // 16 000 000 / 1600 = 10 000
 8000a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a10:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28

	// Set counter Auto-Reload Value
	TIM2->ARR = TIM2_ARR;
 8000a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable the counter in TIM2 CR1
	TIM2->CR1 |= CR1_CEN;
 8000a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

	// Enable interrupts for TIM2
	TIM2->DIER |= DIER_UIE;
 8000a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	60d3      	str	r3, [r2, #12]

	// Enable interrupt in the NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000a40:	201c      	movs	r0, #28
 8000a42:	f7ff ffbd 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <tim2_1s_count_stop>:


void tim2_1s_count_stop(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~CR1_CEN;
 8000a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5e:	f023 0301 	bic.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <usart3_rx_tx_init>:
#define USART_BAUDRATE  115200

static uint16_t compute_baudrate(uint32_t periphClk, uint32_t baudRate);
static void usart_set_baudrate(USART_TypeDef* USARTx, uint32_t periphClk, uint32_t baudRate);

void usart3_rx_tx_init(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOB
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOD_EN;
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <usart3_rx_tx_init+0xd0>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <usart3_rx_tx_init+0xd0>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PD8 as alternate function mode
	GPIOD->MODER &= ~(1U<<16);
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<17);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a96:	6013      	str	r3, [r2, #0]

	// Set the type of the alternate function
	GPIOD->AFR[1] |= (1U<<0);
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab4:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac0:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ac2:	f023 0308 	bic.w	r3, r3, #8
 8000ac6:	6253      	str	r3, [r2, #36]	; 0x24

	// Set PD9 as alternate function mode
	GPIOD->MODER &= ~(1U<<18);
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<19);
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ade:	6013      	str	r3, [r2, #0]

	// Set the type of the alternate function
	GPIOD->AFR[1] |= (1U<<4);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<5);
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000af2:	f043 0320 	orr.w	r3, r3, #32
 8000af6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<6);
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b02:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<7);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <usart3_rx_tx_init+0xd4>)
 8000b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b0e:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable clock access for USART3
	RCC->APB1ENR |= RCC_APB1ENR_USART3_EN;
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <usart3_rx_tx_init+0xd0>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <usart3_rx_tx_init+0xd0>)
 8000b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure Baudrate
	usart_set_baudrate(USART3, APB1_CLK, USART_BAUDRATE);
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	4909      	ldr	r1, [pc, #36]	; (8000b48 <usart3_rx_tx_init+0xd8>)
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <usart3_rx_tx_init+0xdc>)
 8000b24:	f000 f897 	bl	8000c56 <usart_set_baudrate>

	// Configure transfer direction
	USART3->CR1 = (CR1_TE | CR1_RE);
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <usart3_rx_tx_init+0xdc>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= CR1_UE;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <usart3_rx_tx_init+0xdc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <usart3_rx_tx_init+0xdc>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]

	// Auto baud rate detenction if needed
	// USART3->CR2 |= CR2_ABREN;
	// usart3_read();
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	00f42400 	.word	0x00f42400
 8000b4c:	40004800 	.word	0x40004800

08000b50 <usart3_read>:

uint8_t usart3_read(void) {
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	while(!(USART3->ISR & ISR_RXNE)) {
 8000b54:	bf00      	nop
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <usart3_read+0x24>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f9      	beq.n	8000b56 <usart3_read+0x6>

	}

	return USART3->RDR;
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <usart3_read+0x24>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	b2db      	uxtb	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40004800 	.word	0x40004800

08000b78 <usart3_read_countdown_start>:

uint8_t usart3_read_countdown_start(int number) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	while(!(USART3->ISR & ISR_RXNE)) {
 8000b80:	e002      	b.n	8000b88 <usart3_read_countdown_start+0x10>
		GPIOA_GPIOC_7segment_number_display(number);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fbd0 	bl	8000328 <GPIOA_GPIOC_7segment_number_display>
	while(!(USART3->ISR & ISR_RXNE)) {
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <usart3_read_countdown_start+0x2c>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f6      	beq.n	8000b82 <usart3_read_countdown_start+0xa>
	}

	return USART3->RDR;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <usart3_read_countdown_start+0x2c>)
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	b2db      	uxtb	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <usart3_write_ch>:

void usart3_write_ch(int ch) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	// Waiting for the data to be fully transmitted to the shift register
	while (!(USART3->ISR & ISR_TXE)) {
 8000bb0:	bf00      	nop
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <usart3_write_ch+0x2c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f9      	beq.n	8000bb2 <usart3_write_ch+0xa>

	}

	// Conversion to 8-bit using 0xFF
	USART3->TDR = (ch & 0xFF);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <usart3_write_ch+0x2c>)
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40004800 	.word	0x40004800

08000bd8 <usart3_write>:

void usart3_write(char* str, int len) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e00b      	b.n	8000c00 <usart3_write+0x28>
		char currCh = *str++;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	72fb      	strb	r3, [r7, #11]

		usart3_write_ch(currCh);
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffd7 	bl	8000ba8 <usart3_write_ch>
	for (int i = 0; i < len; i++) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbef      	blt.n	8000be8 <usart3_write+0x10>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <usart3_writeLine>:

void usart3_writeLine(char* str, int len) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; i++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e00b      	b.n	8000c3a <usart3_writeLine+0x28>
		char currCh = *str++;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	72fb      	strb	r3, [r7, #11]

		usart3_write_ch(currCh);
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffba 	bl	8000ba8 <usart3_write_ch>
	for (int i = 0; i < len; i++) {
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dbef      	blt.n	8000c22 <usart3_writeLine+0x10>
	}

	usart3_write_ch('\r');
 8000c42:	200d      	movs	r0, #13
 8000c44:	f7ff ffb0 	bl	8000ba8 <usart3_write_ch>
	usart3_write_ch('\n');
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f7ff ffad 	bl	8000ba8 <usart3_write_ch>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <usart_set_baudrate>:

static void usart_set_baudrate(USART_TypeDef* USARTx, uint32_t periphClk, uint32_t baudRate) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_baudrate(periphClk, baudRate);
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	68b8      	ldr	r0, [r7, #8]
 8000c66:	f000 f808 	bl	8000c7a <compute_baudrate>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <compute_baudrate>:

static uint16_t compute_baudrate(uint32_t periphClk, uint32_t baudRate) {
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
	return periphClk / baudRate;
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	b29b      	uxth	r3, r3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cca:	f000 f811 	bl	8000cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cce:	f7ff fcfd 	bl	80006cc <main>

08000cd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   r0, =_estack
 8000cd4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ce0:	08000dac 	.word	0x08000dac
  ldr r2, =_sbss
 8000ce4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ce8:	20000034 	.word	0x20000034

08000cec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <__libc_init_array>:
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	4d0d      	ldr	r5, [pc, #52]	; (8000d28 <__libc_init_array+0x38>)
 8000cf4:	4c0d      	ldr	r4, [pc, #52]	; (8000d2c <__libc_init_array+0x3c>)
 8000cf6:	1b64      	subs	r4, r4, r5
 8000cf8:	10a4      	asrs	r4, r4, #2
 8000cfa:	2600      	movs	r6, #0
 8000cfc:	42a6      	cmp	r6, r4
 8000cfe:	d109      	bne.n	8000d14 <__libc_init_array+0x24>
 8000d00:	4d0b      	ldr	r5, [pc, #44]	; (8000d30 <__libc_init_array+0x40>)
 8000d02:	4c0c      	ldr	r4, [pc, #48]	; (8000d34 <__libc_init_array+0x44>)
 8000d04:	f000 f818 	bl	8000d38 <_init>
 8000d08:	1b64      	subs	r4, r4, r5
 8000d0a:	10a4      	asrs	r4, r4, #2
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	42a6      	cmp	r6, r4
 8000d10:	d105      	bne.n	8000d1e <__libc_init_array+0x2e>
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d18:	4798      	blx	r3
 8000d1a:	3601      	adds	r6, #1
 8000d1c:	e7ee      	b.n	8000cfc <__libc_init_array+0xc>
 8000d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d22:	4798      	blx	r3
 8000d24:	3601      	adds	r6, #1
 8000d26:	e7f2      	b.n	8000d0e <__libc_init_array+0x1e>
 8000d28:	08000da4 	.word	0x08000da4
 8000d2c:	08000da4 	.word	0x08000da4
 8000d30:	08000da4 	.word	0x08000da4
 8000d34:	08000da8 	.word	0x08000da8

08000d38 <_init>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr

08000d44 <_fini>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	bf00      	nop
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr
